[{"/Users/jamesdavies/sliding-puzzle-2/src/index.js":"1","/Users/jamesdavies/sliding-puzzle-2/src/App.js":"2","/Users/jamesdavies/sliding-puzzle-2/src/reportWebVitals.js":"3","/Users/jamesdavies/sliding-puzzle-2/src/Components/Board.js":"4"},{"size":500,"mtime":1611181527030,"results":"5","hashOfConfig":"6"},{"size":3888,"mtime":1611279233078,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1611002338796,"results":"8","hashOfConfig":"6"},{"size":539,"mtime":1611275800937,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1lr419i",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"/Users/jamesdavies/sliding-puzzle-2/src/index.js",[],["22","23"],"/Users/jamesdavies/sliding-puzzle-2/src/App.js",["24"],"import React, { Component } from 'react';\nimport Board from \"./Components/Board\"\nimport { Container, Row, Col } from \"reactstrap\"\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      dataForTheTile: [\n        { 'id': 0, 'currentValue': 0, 'possibleMoves': [1, 4], 'currentRowX': 0, 'currentCloumY': 0, 'winPosition': [0, 0] },\n        { 'id': 1, 'currentValue': 1, 'possibleMoves': [0, 2, 5], 'currentRowX': 1, 'currentCloumY': 0, 'winPosition': [1, 0] },\n        { 'id': 2, 'currentValue': 2, 'possibleMoves': [1, 6, 3], 'currentRowX': 2, 'currentCloumY': 0, 'winPosition': [2, 0] },\n        { 'id': 3, 'currentValue': 3, 'possibleMoves': [2, 7], 'currentRowX': 3, 'currentCloumY': 0, 'winPosition': [3, 0] },\n\n        { 'id': 4, 'currentValue': 4, 'possibleMoves': [0, 5, 8], 'currentRowX': 0, 'currentCloumY': 1, 'winPosition': [0, 1] },\n        { 'id': 5, 'currentValue': 5, 'possibleMoves': [1, 4, 6, 9], 'currentRowX': 1, 'currentCloumY': 1, 'winPosition': [1, 1] },\n        { 'id': 6, 'currentValue': 6, 'possibleMoves': [2, 5, 10, 7], 'currentRowX': 2, 'currentCloumY': 1, 'winPosition': [2, 1] },\n        { 'id': 7, 'currentValue': 7, 'possibleMoves': [3, 6, 11], 'currentRowX': 3, 'currentCloumY': 1, 'winPosition': [3, 1] },\n\n        { 'id': 8, 'currentValue': 8, 'possibleMoves': [4, 9, 12], 'currentRowX': 0, 'currentCloumY': 2, 'winPosition': [0, 2] },\n        { 'id': 9, 'currentValue': 9, 'possibleMoves': [5, 8, 10, 13], 'currentRowX': 1, 'currentCloumY': 2, 'winPosition': [1, 2] },\n        { 'id': 10, 'currentValue': 10, 'possibleMoves': [6, 9, 14, 11], 'currentRowX': 2, 'currentCloumY': 2, 'winPosition': [2, 2] },\n        { 'id': 11, 'currentValue': 11, 'possibleMoves': [7, 10, 15], 'currentRowX': 3, 'currentCloumY': 2, 'winPosition': [3, 2] },\n\n        { 'id': 12, 'currentValue': 12, 'possibleMoves': [8, 13], 'currentRowX': 0, 'currentCloumY': 3, 'winPosition': [0, 3] },\n        { 'id': 13, 'currentValue': 13, 'possibleMoves': [9, 12, 14], 'currentRowX': 1, 'currentCloumY': 3, 'winPosition': [1, 3] },\n        { 'id': 14, 'currentValue': 14, 'possibleMoves': [10, 13, 15], 'currentRowX': 2, 'currentCloumY': 3, 'winPosition': [2, 3] },\n        { 'id': 15, 'currentValue': 15, 'possibleMoves': [11, 14], 'currentRowX': 3, 'currentCloumY': 3, 'winPosition': [3, 3] }],\n      Clicks: 0\n    }\n    this.clickfunction = this.clickfunction.bind(this)\n  }\n\n  clickfunction(tileID) {\n    for (let i = 0; i < 16; i++) {\n      var evilTileValue = this.state.dataForTheTile[i].currentValue\n      if (evilTileValue === 0)\n        for (let j = 0; j < this.state.dataForTheTile[tileID].possibleMoves.length; j++) {\n          var possibleMoveID = this.state.dataForTheTile[tileID].possibleMoves[j];\n          var currentMoveToCheck = this.state.dataForTheTile[i].id\n          if (possibleMoveID === currentMoveToCheck) {\n            console.log('can switch')\n            // create a new array with updated values\n            let copy = this.state.dataForTheTile\n            // console.log(this.state.dataForTheTile)\n            let temp = 0\n            temp = copy[tileID].currentValue\n            copy[tileID].currentValue = copy[i].currentValue\n            copy[i].currentValue = temp\n            console.log(copy)\n            this.setState({ dataForTheTile: copy })\n            break;\n          } else {\n            console.log('can not switch')\n            break\n          }\n\n        }\n    }\n  }\n\n\n  componentDidUpdate() {\n    console.log(\"state was set\", this.state.dataForTheTile);\n  }\n  render() {\n    return (\n      <>\n        <Container style={{ border: '1px solid grey' }}>\n          <Col>\n            <h1> Sliding Puzzle </h1>\n          </Col>\n          <Board\n            tile_Data_Raw={this.state.dataForTheTile}\n            tile_click={this.clickfunction} />\n        </Container>\n      </>\n    );\n  }\n}\n\n\n\nexport default App;","/Users/jamesdavies/sliding-puzzle-2/src/reportWebVitals.js",[],"/Users/jamesdavies/sliding-puzzle-2/src/Components/Board.js",["25","26"],"import React from 'react';\nimport { Container, Button } from \"reactstrap\"\n\nfunction Board(props) {\n\n    let buttonArray = []\n    for (let i = 0; i < props.tile_Data_Raw.length; i++) {\n        let num = props.tile_Data_Raw[i]\n        let ogButton = <Button outline color=\"primary\" onClick={() => props.tile_click(i)} style={{ height: 150, width: 250 }} key={i}>{num.currentValue}</Button>\n        buttonArray.push(ogButton)\n    }\n    return (\n        <Container>\n            {buttonArray}\n        </Container>\n    )\n}\n\nexport default Board;",["27","28"],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":3,"column":21,"nodeType":"35","messageId":"36","endLine":3,"endColumn":24},{"ruleId":"33","severity":1,"message":"34","line":3,"column":21,"nodeType":"35","messageId":"36","endLine":3,"endColumn":24},{"ruleId":"33","severity":1,"message":"37","line":3,"column":26,"nodeType":"35","messageId":"36","endLine":3,"endColumn":29},{"ruleId":"29","replacedBy":"38"},{"ruleId":"31","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.",["40"],["41"],"no-global-assign","no-unsafe-negation"]